part of 'tailwindcss.dart';

/// A utility class instantiated per component to collect Tailwind CSS classes
/// and register them with the global tracker.
class TailwindClassCollector {
  final Set<String> _collectedClasses = const {};

  const TailwindClassCollector();

  /// Adds a single Tailwind CSS class string to this component's collection.
  ///
  /// Examples: 'bg-red-500', 'text-blue-300', 'p-4', 'bg-[gold]'.
  void addClass(String className) {
    if (className.isNotEmpty) {
      _collectedClasses.add(className);
    }
  }

  String get className => _collectedClasses.join(' ');

  /// Adds multiple Tailwind CSS class strings.
  void addClasses(Iterable<String> classNames) {
    for (var className in classNames) {
      addClass(className);
    }
  }

  /// Finalizes the collection for this component instance and registers
  /// all collected classes with the global tracker.
  ///
  /// This method should typically be called once per component instance
  /// after all desired classes have been added (e.g., at the end of the
  /// component's constructor or build method, depending on your framework's lifecycle).
  void registerWithGlobalTracker() {
    for (var className in _collectedClasses) {
      GlobalTailwindTracker.instance.registerClass(className);
    }
  }
}

/// A global singleton that tracks all unique Tailwind CSS classes
/// encountered during the build process.
///
/// It is responsible for generating the 'tailwind.g.css' file which
/// Tailwind's static analyzer can then pick up.
class GlobalTailwindTracker {
  // Singleton instance
  static final GlobalTailwindTracker _instance =
      GlobalTailwindTracker._internal();

  factory GlobalTailwindTracker() {
    return _instance;
  }

  GlobalTailwindTracker._internal();

  static GlobalTailwindTracker get instance => _instance;

  // Using a Set to store unique class names
  final Set<String> _allCollectedClasses = {};

  List<String> get registeredClasses => List.from(_allCollectedClasses);

  /// Registers a single Tailwind CSS class with the global tracker.
  /// This method is called by `TailwindClassCollector` instances.
  void registerClass(String className) {
    if (className.isNotEmpty) {
      _allCollectedClasses.add(className);
    }
  }

  /// Registers multiple Tailwind CSS class names.
  void registerClasses(Iterable<String> classNames) {
    for (var className in classNames) {
      registerClass(className);
    }
  }

  /// Generates the 'tailwind.g.css' file containing all registered classes.
  ///
  /// This method should be called as part of your build process (e.g.,
  /// by a `codegen_script.dart` or a build runner).
  ///
  /// The [filePath] should be the path where 'tailwind.g.css' should be written,
  /// typically relative to your project root (e.g., 'tailwind.g.css').
  Future<void> generateTailwindFile(String filePath) async {
    if (_allCollectedClasses.isEmpty) {
      print(
          'GlobalTailwindTracker: No dynamic classes to generate. Skipping file write.');
      // Ensure the file is empty or removed if no classes, to avoid stale content
      final file = File(filePath);
      if (await file.exists()) {
        await file
            .writeAsString('/* No dynamic Tailwind classes generated */\n');
      }
      return;
    }

    final buffer = StringBuffer();
    buffer.writeln(
        '/* This file is auto-generated by GlobalTailwindTracker. DO NOT EDIT. */');
    buffer.writeln('/* Generated on: ${DateTime.now()} */');
    buffer.writeln('');

    // Sort for consistent output (makes diffs easier)
    final sortedClasses = _allCollectedClasses.toList()..sort();

    for (var className in sortedClasses) {
      // Escape special characters in CSS class names for arbitrary values
      // e.g., 'bg-[gold]' -> '.bg-\[gold\] {}'
      // '#' -> '\#'
      // '[' -> '\['
      // ']' -> '\]'
      // '/' -> '\/' (sometimes needed, but often not within [])
      String escapedClassName =
          className.replaceAllMapped(RegExp(r'[\[\]#/]'), (match) {
        // Only escape / if it's not part of a valid CSS identifier like 'group/item'
        // For general safety, just escape all special chars that could be in a class name.
        if (match[0] == '/') {
          // Be careful with '/' as it's part of modern CSS function syntax (e.g., rgb(r g b / a))
          // and also in Tailwind's 'group/item' syntax. Only escape if it's truly
          // part of the raw class name itself.
          // For now, simplify and escape common arbitrary value chars:
          return '\\${match[0]}';
        }
        return '\\${match[0]}';
      });

      // Tailwind itself usually handles escaping when processing HTML,
      // but if we directly write the CSS, we need valid CSS identifiers.
      // A more robust regex might be needed for all edge cases of arbitrary values.
      // For common cases like colors, this should suffice.
      buffer.writeln('.$escapedClassName {}');
    }

    final file = File(filePath);
    await file.writeAsString(buffer.toString());
    print(
        'GlobalTailwindTracker: Generated ${sortedClasses.length} dynamic classes to $filePath');
  }

  /// Clears all collected classes. Useful for ensuring a clean state
  /// between build runs or for testing.
  void clearCollectedClasses() {
    _allCollectedClasses.clear();
    print('GlobalTailwindTracker: All collected classes cleared.');
  }
}
